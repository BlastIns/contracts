{
	"id": "69412dc6e6a0882a1ab41d123cf49103",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"blast_inscription/orderbook/pyth/IPyth.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./PythStructs.sol\";\nimport \"./IPythEvents.sol\";\n\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\n/// @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n/// @author Pyth Data Association\ninterface IPyth is IPythEvents {\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\n\n    /// @notice Returns the price and confidence interval.\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\n    /// @dev Reverts if the EMA price is not available.\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price of a price feed without any sanity checks.\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n    /// However, if the price is not recent this function returns the latest available price.\n    ///\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n    /// the returned price is recent or useful for any particular application.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n    /// of the current time.\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Update price feeds with given update messages.\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    /// Prices will be updated if they are more recent than the current stored prices.\n    /// The call will succeed even if the update is not the most recent.\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\n\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\n    ///\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\n    function updatePriceFeedsIfNecessary(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64[] calldata publishTimes\n    ) external payable;\n\n    /// @notice Returns the required fee to update an array of price updates.\n    /// @param updateData Array of price update data.\n    /// @return feeAmount The required fee in Wei.\n    function getUpdateFee(\n        bytes[] calldata updateData\n    ) external view returns (uint feeAmount);\n\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n    /// within `minPublishTime` and `maxPublishTime`.\n    ///\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdates(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n}"
			},
			"blast_inscription/orderbook/pyth/IPythEvents.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @title IPythEvents contains the events that Pyth contract emits.\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\ninterface IPythEvents {\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\n    /// @param id The Pyth Price Feed ID.\n    /// @param publishTime Publish time of the given price update.\n    /// @param price Price of the given price update.\n    /// @param conf Confidence interval of the given price update.\n    event PriceFeedUpdate(\n        bytes32 indexed id,\n        uint64 publishTime,\n        int64 price,\n        uint64 conf\n    );\n\n    /// @dev Emitted when a batch price update is processed successfully.\n    /// @param chainId ID of the source chain that the batch price update comes from.\n    /// @param sequenceNumber Sequence number of the batch price update.\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\n}"
			},
			"blast_inscription/orderbook/pyth/PythStructs.sol": {
				"content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ncontract PythStructs {\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\n    //\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\n    // Both the price and confidence are stored in a fixed-point numeric representation,\n    // `x * (10^expo)`, where `expo` is the exponent.\n    //\n    // Please refer to the documentation at https://docs.pyth.network/consumers/best-practices for how\n    // to how this price safely.\n    struct Price {\n        // Price\n        int64 price;\n        // Confidence interval around the price\n        uint64 conf;\n        // Price exponent\n        int32 expo;\n        // Unix timestamp describing when the price was published\n        uint publishTime;\n    }\n\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\n    struct PriceFeed {\n        // The price ID.\n        bytes32 id;\n        // Latest available price\n        Price price;\n        // Latest available exponentially-weighted moving average price\n        Price emaPrice;\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"blast_inscription/orderbook/pyth/IPyth.sol": {
				"IPyth": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "chainId",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "sequenceNumber",
									"type": "uint64"
								}
							],
							"name": "BatchPriceFeedUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "publishTime",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "int64",
									"name": "price",
									"type": "int64"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "conf",
									"type": "uint64"
								}
							],
							"name": "PriceFeedUpdate",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "getEmaPrice",
							"outputs": [
								{
									"components": [
										{
											"internalType": "int64",
											"name": "price",
											"type": "int64"
										},
										{
											"internalType": "uint64",
											"name": "conf",
											"type": "uint64"
										},
										{
											"internalType": "int32",
											"name": "expo",
											"type": "int32"
										},
										{
											"internalType": "uint256",
											"name": "publishTime",
											"type": "uint256"
										}
									],
									"internalType": "struct PythStructs.Price",
									"name": "price",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "age",
									"type": "uint256"
								}
							],
							"name": "getEmaPriceNoOlderThan",
							"outputs": [
								{
									"components": [
										{
											"internalType": "int64",
											"name": "price",
											"type": "int64"
										},
										{
											"internalType": "uint64",
											"name": "conf",
											"type": "uint64"
										},
										{
											"internalType": "int32",
											"name": "expo",
											"type": "int32"
										},
										{
											"internalType": "uint256",
											"name": "publishTime",
											"type": "uint256"
										}
									],
									"internalType": "struct PythStructs.Price",
									"name": "price",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "getEmaPriceUnsafe",
							"outputs": [
								{
									"components": [
										{
											"internalType": "int64",
											"name": "price",
											"type": "int64"
										},
										{
											"internalType": "uint64",
											"name": "conf",
											"type": "uint64"
										},
										{
											"internalType": "int32",
											"name": "expo",
											"type": "int32"
										},
										{
											"internalType": "uint256",
											"name": "publishTime",
											"type": "uint256"
										}
									],
									"internalType": "struct PythStructs.Price",
									"name": "price",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "getPrice",
							"outputs": [
								{
									"components": [
										{
											"internalType": "int64",
											"name": "price",
											"type": "int64"
										},
										{
											"internalType": "uint64",
											"name": "conf",
											"type": "uint64"
										},
										{
											"internalType": "int32",
											"name": "expo",
											"type": "int32"
										},
										{
											"internalType": "uint256",
											"name": "publishTime",
											"type": "uint256"
										}
									],
									"internalType": "struct PythStructs.Price",
									"name": "price",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "age",
									"type": "uint256"
								}
							],
							"name": "getPriceNoOlderThan",
							"outputs": [
								{
									"components": [
										{
											"internalType": "int64",
											"name": "price",
											"type": "int64"
										},
										{
											"internalType": "uint64",
											"name": "conf",
											"type": "uint64"
										},
										{
											"internalType": "int32",
											"name": "expo",
											"type": "int32"
										},
										{
											"internalType": "uint256",
											"name": "publishTime",
											"type": "uint256"
										}
									],
									"internalType": "struct PythStructs.Price",
									"name": "price",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								}
							],
							"name": "getPriceUnsafe",
							"outputs": [
								{
									"components": [
										{
											"internalType": "int64",
											"name": "price",
											"type": "int64"
										},
										{
											"internalType": "uint64",
											"name": "conf",
											"type": "uint64"
										},
										{
											"internalType": "int32",
											"name": "expo",
											"type": "int32"
										},
										{
											"internalType": "uint256",
											"name": "publishTime",
											"type": "uint256"
										}
									],
									"internalType": "struct PythStructs.Price",
									"name": "price",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "updateData",
									"type": "bytes[]"
								}
							],
							"name": "getUpdateFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "feeAmount",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getValidTimePeriod",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "validTimePeriod",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "updateData",
									"type": "bytes[]"
								},
								{
									"internalType": "bytes32[]",
									"name": "priceIds",
									"type": "bytes32[]"
								},
								{
									"internalType": "uint64",
									"name": "minPublishTime",
									"type": "uint64"
								},
								{
									"internalType": "uint64",
									"name": "maxPublishTime",
									"type": "uint64"
								}
							],
							"name": "parsePriceFeedUpdates",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "id",
											"type": "bytes32"
										},
										{
											"components": [
												{
													"internalType": "int64",
													"name": "price",
													"type": "int64"
												},
												{
													"internalType": "uint64",
													"name": "conf",
													"type": "uint64"
												},
												{
													"internalType": "int32",
													"name": "expo",
													"type": "int32"
												},
												{
													"internalType": "uint256",
													"name": "publishTime",
													"type": "uint256"
												}
											],
											"internalType": "struct PythStructs.Price",
											"name": "price",
											"type": "tuple"
										},
										{
											"components": [
												{
													"internalType": "int64",
													"name": "price",
													"type": "int64"
												},
												{
													"internalType": "uint64",
													"name": "conf",
													"type": "uint64"
												},
												{
													"internalType": "int32",
													"name": "expo",
													"type": "int32"
												},
												{
													"internalType": "uint256",
													"name": "publishTime",
													"type": "uint256"
												}
											],
											"internalType": "struct PythStructs.Price",
											"name": "emaPrice",
											"type": "tuple"
										}
									],
									"internalType": "struct PythStructs.PriceFeed[]",
									"name": "priceFeeds",
									"type": "tuple[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "updateData",
									"type": "bytes[]"
								}
							],
							"name": "updatePriceFeeds",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes[]",
									"name": "updateData",
									"type": "bytes[]"
								},
								{
									"internalType": "bytes32[]",
									"name": "priceIds",
									"type": "bytes32[]"
								},
								{
									"internalType": "uint64[]",
									"name": "publishTimes",
									"type": "uint64[]"
								}
							],
							"name": "updatePriceFeedsIfNecessary",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Pyth Data Association",
						"details": "Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.",
						"events": {
							"BatchPriceFeedUpdate(uint16,uint64)": {
								"details": "Emitted when a batch price update is processed successfully.",
								"params": {
									"chainId": "ID of the source chain that the batch price update comes from.",
									"sequenceNumber": "Sequence number of the batch price update."
								}
							},
							"PriceFeedUpdate(bytes32,uint64,int64,uint64)": {
								"details": "Emitted when the price feed with `id` has received a fresh update.",
								"params": {
									"conf": "Confidence interval of the given price update.",
									"id": "The Pyth Price Feed ID.",
									"price": "Price of the given price update.",
									"publishTime": "Publish time of the given price update."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"getEmaPrice(bytes32)": {
								"details": "Reverts if the EMA price is not available.",
								"params": {
									"id": "The Pyth Price Feed ID of which to fetch the EMA price and confidence interval."
								},
								"returns": {
									"price": "- please read the documentation of PythStructs.Price to understand how to use this safely."
								}
							},
							"getEmaPriceNoOlderThan(bytes32,uint256)": {
								"details": "This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.",
								"returns": {
									"price": "- please read the documentation of PythStructs.Price to understand how to use this safely."
								}
							},
							"getEmaPriceUnsafe(bytes32)": {
								"details": "This function returns the same price as `getEmaPrice` in the case where the price is available. However, if the price is not recent this function returns the latest available price. The returned price can be from arbitrarily far in the past; this function makes no guarantees that the returned price is recent or useful for any particular application. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.",
								"returns": {
									"price": "- please read the documentation of PythStructs.Price to understand how to use this safely."
								}
							},
							"getPrice(bytes32)": {
								"details": "Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.",
								"params": {
									"id": "The Pyth Price Feed ID of which to fetch the price and confidence interval."
								},
								"returns": {
									"price": "- please read the documentation of PythStructs.Price to understand how to use this safely."
								}
							},
							"getPriceNoOlderThan(bytes32,uint256)": {
								"details": "This function is a sanity-checked version of `getPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.",
								"returns": {
									"price": "- please read the documentation of PythStructs.Price to understand how to use this safely."
								}
							},
							"getPriceUnsafe(bytes32)": {
								"details": "This function returns the most recent price update in this contract without any recency checks. This function is unsafe as the returned price update may be arbitrarily far in the past. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getPrice` or `getPriceNoOlderThan`.",
								"returns": {
									"price": "- please read the documentation of PythStructs.Price to understand how to use this safely."
								}
							},
							"getUpdateFee(bytes[])": {
								"params": {
									"updateData": "Array of price update data."
								},
								"returns": {
									"feeAmount": "The required fee in Wei."
								}
							},
							"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)": {
								"details": "Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range.",
								"params": {
									"maxPublishTime": "maximum acceptable publishTime for the given `priceIds`.",
									"minPublishTime": "minimum acceptable publishTime for the given `priceIds`.",
									"priceIds": "Array of price ids.",
									"updateData": "Array of price update data."
								},
								"returns": {
									"priceFeeds": "Array of the price feeds corresponding to the given `priceIds` (with the same order)."
								}
							},
							"updatePriceFeeds(bytes[])": {
								"details": "Reverts if the transferred fee is not sufficient or the updateData is invalid.",
								"params": {
									"updateData": "Array of price update data."
								}
							},
							"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])": {
								"details": "Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.",
								"params": {
									"priceIds": "Array of price ids.",
									"publishTimes": "Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`",
									"updateData": "Array of price update data."
								}
							}
						},
						"title": "Consume prices from the Pyth Network (https://pyth.network/).",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getEmaPrice(bytes32)": "b5dcc911",
							"getEmaPriceNoOlderThan(bytes32,uint256)": "711a2e28",
							"getEmaPriceUnsafe(bytes32)": "9474f45b",
							"getPrice(bytes32)": "31d98b3f",
							"getPriceNoOlderThan(bytes32,uint256)": "a4ae35e0",
							"getPriceUnsafe(bytes32)": "96834ad3",
							"getUpdateFee(bytes[])": "d47eed45",
							"getValidTimePeriod()": "e18910a3",
							"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)": "4716e9c5",
							"updatePriceFeeds(bytes[])": "ef9e5e28",
							"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])": "b9256d28"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"BatchPriceFeedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"publishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"}],\"name\":\"PriceFeedUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getEmaPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"getUpdateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validTimePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"minPublishTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPublishTime\",\"type\":\"uint64\"}],\"name\":\"parsePriceFeedUpdates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"emaPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct PythStructs.PriceFeed[]\",\"name\":\"priceFeeds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"updatePriceFeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"publishTimes\",\"type\":\"uint64[]\"}],\"name\":\"updatePriceFeedsIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Pyth Data Association\",\"details\":\"Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\",\"events\":{\"BatchPriceFeedUpdate(uint16,uint64)\":{\"details\":\"Emitted when a batch price update is processed successfully.\",\"params\":{\"chainId\":\"ID of the source chain that the batch price update comes from.\",\"sequenceNumber\":\"Sequence number of the batch price update.\"}},\"PriceFeedUpdate(bytes32,uint64,int64,uint64)\":{\"details\":\"Emitted when the price feed with `id` has received a fresh update.\",\"params\":{\"conf\":\"Confidence interval of the given price update.\",\"id\":\"The Pyth Price Feed ID.\",\"price\":\"Price of the given price update.\",\"publishTime\":\"Publish time of the given price update.\"}}},\"kind\":\"dev\",\"methods\":{\"getEmaPrice(bytes32)\":{\"details\":\"Reverts if the EMA price is not available.\",\"params\":{\"id\":\"The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\"},\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getEmaPriceUnsafe(bytes32)\":{\"details\":\"This function returns the same price as `getEmaPrice` in the case where the price is available. However, if the price is not recent this function returns the latest available price. The returned price can be from arbitrarily far in the past; this function makes no guarantees that the returned price is recent or useful for any particular application. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPrice(bytes32)\":{\"details\":\"Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\",\"params\":{\"id\":\"The Pyth Price Feed ID of which to fetch the price and confidence interval.\"},\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceUnsafe(bytes32)\":{\"details\":\"This function returns the most recent price update in this contract without any recency checks. This function is unsafe as the returned price update may be arbitrarily far in the past. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getUpdateFee(bytes[])\":{\"params\":{\"updateData\":\"Array of price update data.\"},\"returns\":{\"feeAmount\":\"The required fee in Wei.\"}},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range.\",\"params\":{\"maxPublishTime\":\"maximum acceptable publishTime for the given `priceIds`.\",\"minPublishTime\":\"minimum acceptable publishTime for the given `priceIds`.\",\"priceIds\":\"Array of price ids.\",\"updateData\":\"Array of price update data.\"},\"returns\":{\"priceFeeds\":\"Array of the price feeds corresponding to the given `priceIds` (with the same order).\"}},\"updatePriceFeeds(bytes[])\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"updateData\":\"Array of price update data.\"}},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"details\":\"Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"priceIds\":\"Array of price ids.\",\"publishTimes\":\"Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\",\"updateData\":\"Array of price update data.\"}}},\"title\":\"Consume prices from the Pyth Network (https://pyth.network/).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEmaPrice(bytes32)\":{\"notice\":\"Returns the exponentially-weighted moving average price and confidence interval.\"},\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the exponentially-weighted moving average price that is no older than `age` seconds of the current time.\"},\"getEmaPriceUnsafe(bytes32)\":{\"notice\":\"Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\"},\"getPrice(bytes32)\":{\"notice\":\"Returns the price and confidence interval.\"},\"getPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the price that is no older than `age` seconds of the current time.\"},\"getPriceUnsafe(bytes32)\":{\"notice\":\"Returns the price of a price feed without any sanity checks.\"},\"getUpdateFee(bytes[])\":{\"notice\":\"Returns the required fee to update an array of price updates.\"},\"getValidTimePeriod()\":{\"notice\":\"Returns the period (in seconds) that a price feed is considered valid since its publish time\"},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"notice\":\"Parse `updateData` and return price feeds of the given `priceIds` if they are all published within `minPublishTime` and `maxPublishTime`. You can use this method if you want to use a Pyth price at a fixed time and not the most recent price; otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array.\"},\"updatePriceFeeds(bytes[])\":{\"notice\":\"Update price feeds with given update messages. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. Prices will be updated if they are more recent than the current stored prices. The call will succeed even if the update is not the most recent.\"},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"notice\":\"Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have a newer or equal publish time than the given publish time, it will reject the transaction to save gas. Otherwise, it calls updatePriceFeeds method to update the prices.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"blast_inscription/orderbook/pyth/IPyth.sol\":\"IPyth\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"blast_inscription/orderbook/pyth/IPyth.sol\":{\"keccak256\":\"0x4acd0857d593afa05a143353054fbe8750cc8e7c34cd1e4506a05bb913e86749\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3c6aba32cad63e85960ab2b7f01cb08b11ce5a746451b058166da98a4accf494\",\"dweb:/ipfs/QmfTREPCGDkyMhHzkYiMUjaRoQiooZQaazm2tPDnWk33Cj\"]},\"blast_inscription/orderbook/pyth/IPythEvents.sol\":{\"keccak256\":\"0xacc925f987d35b33cd03731f0be225728ccb824f796e8ec96afcfbb1d4d32045\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7cb834f93c2dc39a08c4b2e97148f727fc5dfdc9bb9fc0f46d69b65d40892254\",\"dweb:/ipfs/QmUnp8h6T66Q9TXjQvPMkGGhj1XKUoFCCrpw753fNETSWR\"]},\"blast_inscription/orderbook/pyth/PythStructs.sol\":{\"keccak256\":\"0xbd3a60cb1584e3fa9c0c3f01a072cef9effeca1cf7a7dad33cd18f29e084c782\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6791fec4f281c214efcbc2013249b82c9e97953c2c02d192d8cbe97987550d26\",\"dweb:/ipfs/QmXFiHy4yKqgMWgaG8LPqsgoTdS11BvJgWBFvb1T21VS7g\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getEmaPrice(bytes32)": {
								"notice": "Returns the exponentially-weighted moving average price and confidence interval."
							},
							"getEmaPriceNoOlderThan(bytes32,uint256)": {
								"notice": "Returns the exponentially-weighted moving average price that is no older than `age` seconds of the current time."
							},
							"getEmaPriceUnsafe(bytes32)": {
								"notice": "Returns the exponentially-weighted moving average price of a price feed without any sanity checks."
							},
							"getPrice(bytes32)": {
								"notice": "Returns the price and confidence interval."
							},
							"getPriceNoOlderThan(bytes32,uint256)": {
								"notice": "Returns the price that is no older than `age` seconds of the current time."
							},
							"getPriceUnsafe(bytes32)": {
								"notice": "Returns the price of a price feed without any sanity checks."
							},
							"getUpdateFee(bytes[])": {
								"notice": "Returns the required fee to update an array of price updates."
							},
							"getValidTimePeriod()": {
								"notice": "Returns the period (in seconds) that a price feed is considered valid since its publish time"
							},
							"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)": {
								"notice": "Parse `updateData` and return price feeds of the given `priceIds` if they are all published within `minPublishTime` and `maxPublishTime`. You can use this method if you want to use a Pyth price at a fixed time and not the most recent price; otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array."
							},
							"updatePriceFeeds(bytes[])": {
								"notice": "Update price feeds with given update messages. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. Prices will be updated if they are more recent than the current stored prices. The call will succeed even if the update is not the most recent."
							},
							"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])": {
								"notice": "Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have a newer or equal publish time than the given publish time, it will reject the transaction to save gas. Otherwise, it calls updatePriceFeeds method to update the prices."
							}
						},
						"version": 1
					}
				}
			},
			"blast_inscription/orderbook/pyth/IPythEvents.sol": {
				"IPythEvents": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint16",
									"name": "chainId",
									"type": "uint16"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "sequenceNumber",
									"type": "uint64"
								}
							],
							"name": "BatchPriceFeedUpdate",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "id",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "publishTime",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "int64",
									"name": "price",
									"type": "int64"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "conf",
									"type": "uint64"
								}
							],
							"name": "PriceFeedUpdate",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "This interface can be used for listening to the updates for off-chain and testing purposes.",
						"events": {
							"BatchPriceFeedUpdate(uint16,uint64)": {
								"details": "Emitted when a batch price update is processed successfully.",
								"params": {
									"chainId": "ID of the source chain that the batch price update comes from.",
									"sequenceNumber": "Sequence number of the batch price update."
								}
							},
							"PriceFeedUpdate(bytes32,uint64,int64,uint64)": {
								"details": "Emitted when the price feed with `id` has received a fresh update.",
								"params": {
									"conf": "Confidence interval of the given price update.",
									"id": "The Pyth Price Feed ID.",
									"price": "Price of the given price update.",
									"publishTime": "Publish time of the given price update."
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"title": "IPythEvents contains the events that Pyth contract emits.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"name\":\"BatchPriceFeedUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"publishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"}],\"name\":\"PriceFeedUpdate\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This interface can be used for listening to the updates for off-chain and testing purposes.\",\"events\":{\"BatchPriceFeedUpdate(uint16,uint64)\":{\"details\":\"Emitted when a batch price update is processed successfully.\",\"params\":{\"chainId\":\"ID of the source chain that the batch price update comes from.\",\"sequenceNumber\":\"Sequence number of the batch price update.\"}},\"PriceFeedUpdate(bytes32,uint64,int64,uint64)\":{\"details\":\"Emitted when the price feed with `id` has received a fresh update.\",\"params\":{\"conf\":\"Confidence interval of the given price update.\",\"id\":\"The Pyth Price Feed ID.\",\"price\":\"Price of the given price update.\",\"publishTime\":\"Publish time of the given price update.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"IPythEvents contains the events that Pyth contract emits.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"blast_inscription/orderbook/pyth/IPythEvents.sol\":\"IPythEvents\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"blast_inscription/orderbook/pyth/IPythEvents.sol\":{\"keccak256\":\"0xacc925f987d35b33cd03731f0be225728ccb824f796e8ec96afcfbb1d4d32045\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7cb834f93c2dc39a08c4b2e97148f727fc5dfdc9bb9fc0f46d69b65d40892254\",\"dweb:/ipfs/QmUnp8h6T66Q9TXjQvPMkGGhj1XKUoFCCrpw753fNETSWR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"blast_inscription/orderbook/pyth/PythStructs.sol": {
				"PythStructs": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"blast_inscription/orderbook/pyth/PythStructs.sol\":64:1151  contract PythStructs {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"blast_inscription/orderbook/pyth/PythStructs.sol\":64:1151  contract PythStructs {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212207172c42562a25458a4ff9e7db8a62fbe51926103c0fd89d85bcce22f20629a4264736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea26469706673582212207172c42562a25458a4ff9e7db8a62fbe51926103c0fd89d85bcce22f20629a4264736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x72C42562A25458A4FF9E7DB8A62FBE519261 SUB 0xC0 REVERT DUP10 0xD8 JUMPDEST 0xCC 0xE2 0x2F KECCAK256 PUSH3 0x9A4264 PUSH20 0x6F6C634300081400330000000000000000000000 ",
							"sourceMap": "64:1087:2:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea26469706673582212207172c42562a25458a4ff9e7db8a62fbe51926103c0fd89d85bcce22f20629a4264736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x72C42562A25458A4FF9E7DB8A62FBE519261 SUB 0xC0 REVERT DUP10 0xD8 JUMPDEST 0xCC 0xE2 0x2F KECCAK256 PUSH3 0x9A4264 PUSH20 0x6F6C634300081400330000000000000000000000 ",
							"sourceMap": "64:1087:2:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "64",
								"totalCost": "12464"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 64,
									"end": 1151,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 64,
									"end": 1151,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207172c42562a25458a4ff9e7db8a62fbe51926103c0fd89d85bcce22f20629a4264736f6c63430008140033",
									".code": [
										{
											"begin": 64,
											"end": 1151,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 64,
											"end": 1151,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 64,
											"end": 1151,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 64,
											"end": 1151,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 64,
											"end": 1151,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 64,
											"end": 1151,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							},
							"sourceList": [
								"blast_inscription/orderbook/pyth/IPyth.sol",
								"blast_inscription/orderbook/pyth/IPythEvents.sol",
								"blast_inscription/orderbook/pyth/PythStructs.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"blast_inscription/orderbook/pyth/PythStructs.sol\":\"PythStructs\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"blast_inscription/orderbook/pyth/PythStructs.sol\":{\"keccak256\":\"0xbd3a60cb1584e3fa9c0c3f01a072cef9effeca1cf7a7dad33cd18f29e084c782\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://6791fec4f281c214efcbc2013249b82c9e97953c2c02d192d8cbe97987550d26\",\"dweb:/ipfs/QmXFiHy4yKqgMWgaG8LPqsgoTdS11BvJgWBFvb1T21VS7g\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"blast_inscription/orderbook/pyth/IPyth.sol": {
				"ast": {
					"absolutePath": "blast_inscription/orderbook/pyth/IPyth.sol",
					"exportedSymbols": {
						"IPyth": [
							118
						],
						"IPythEvents": [
							140
						],
						"PythStructs": [
							161
						]
					},
					"id": 119,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:0"
						},
						{
							"absolutePath": "blast_inscription/orderbook/pyth/PythStructs.sol",
							"file": "./PythStructs.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 119,
							"sourceUnit": 162,
							"src": "64:27:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "blast_inscription/orderbook/pyth/IPythEvents.sol",
							"file": "./IPythEvents.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 119,
							"sourceUnit": 141,
							"src": "92:27:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "IPythEvents",
										"nameLocations": [
											"373:11:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 140,
										"src": "373:11:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "373:11:0"
								}
							],
							"canonicalName": "IPyth",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "121:233:0",
								"text": "@title Consume prices from the Pyth Network (https://pyth.network/).\n @dev Please refer to the guidance at https://docs.pyth.network/consumers/best-practices for how to consume prices safely.\n @author Pyth Data Association"
							},
							"fullyImplemented": false,
							"id": 118,
							"linearizedBaseContracts": [
								118,
								140
							],
							"name": "IPyth",
							"nameLocation": "364:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "391:104:0",
										"text": "@notice Returns the period (in seconds) that a price feed is considered valid since its publish time"
									},
									"functionSelector": "e18910a3",
									"id": 12,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getValidTimePeriod",
									"nameLocation": "509:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "527:2:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "validTimePeriod",
												"nameLocation": "558:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "553:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 9,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "553:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "552:22:0"
									},
									"scope": 118,
									"src": "500:75:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 13,
										"nodeType": "StructuredDocumentation",
										"src": "581:364:0",
										"text": "@notice Returns the price and confidence interval.\n @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."
									},
									"functionSelector": "31d98b3f",
									"id": 21,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPrice",
									"nameLocation": "959:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "985:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "977:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 14,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "977:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "967:26:0"
									},
									"returnParameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "1042:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "1017:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Price_$151_memory_ptr",
													"typeString": "struct PythStructs.Price"
												},
												"typeName": {
													"id": 18,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 17,
														"name": "PythStructs.Price",
														"nameLocations": [
															"1017:11:0",
															"1029:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 151,
														"src": "1017:17:0"
													},
													"referencedDeclaration": 151,
													"src": "1017:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
														"typeString": "struct PythStructs.Price"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1016:32:0"
									},
									"scope": 118,
									"src": "950:99:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "1055:359:0",
										"text": "@notice Returns the exponentially-weighted moving average price and confidence interval.\n @dev Reverts if the EMA price is not available.\n @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."
									},
									"functionSelector": "b5dcc911",
									"id": 30,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getEmaPrice",
									"nameLocation": "1428:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "1457:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1449:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 23,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1449:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1439:26:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "1514:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1489:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Price_$151_memory_ptr",
													"typeString": "struct PythStructs.Price"
												},
												"typeName": {
													"id": 27,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 26,
														"name": "PythStructs.Price",
														"nameLocations": [
															"1489:11:0",
															"1501:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 151,
														"src": "1489:17:0"
													},
													"referencedDeclaration": 151,
													"src": "1489:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
														"typeString": "struct PythStructs.Price"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1488:32:0"
									},
									"scope": 118,
									"src": "1419:102:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1527:690:0",
										"text": "@notice Returns the price of a price feed without any sanity checks.\n @dev This function returns the most recent price update in this contract without any recency checks.\n This function is unsafe as the returned price update may be arbitrarily far in the past.\n Users of this function should check the `publishTime` in the price to ensure that the returned price is\n sufficiently recent for their application. If you are considering using this function, it may be\n safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."
									},
									"functionSelector": "96834ad3",
									"id": 39,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPriceUnsafe",
									"nameLocation": "2231:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "2263:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 39,
												"src": "2255:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 32,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2255:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2245:26:0"
									},
									"returnParameters": {
										"id": 38,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "2320:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 39,
												"src": "2295:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Price_$151_memory_ptr",
													"typeString": "struct PythStructs.Price"
												},
												"typeName": {
													"id": 36,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 35,
														"name": "PythStructs.Price",
														"nameLocations": [
															"2295:11:0",
															"2307:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 151,
														"src": "2295:17:0"
													},
													"referencedDeclaration": 151,
													"src": "2295:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
														"typeString": "struct PythStructs.Price"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2294:32:0"
									},
									"scope": 118,
									"src": "2222:105:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 40,
										"nodeType": "StructuredDocumentation",
										"src": "2333:423:0",
										"text": "@notice Returns the price that is no older than `age` seconds of the current time.\n @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n recently.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."
									},
									"functionSelector": "a4ae35e0",
									"id": 50,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPriceNoOlderThan",
									"nameLocation": "2770:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "2807:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2799:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 41,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2799:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "age",
												"nameLocation": "2824:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2819:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 43,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2819:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2789:44:0"
									},
									"returnParameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "2882:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2857:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Price_$151_memory_ptr",
													"typeString": "struct PythStructs.Price"
												},
												"typeName": {
													"id": 47,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 46,
														"name": "PythStructs.Price",
														"nameLocations": [
															"2857:11:0",
															"2869:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 151,
														"src": "2857:17:0"
													},
													"referencedDeclaration": 151,
													"src": "2857:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
														"typeString": "struct PythStructs.Price"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2856:32:0"
									},
									"scope": 118,
									"src": "2761:128:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "2895:925:0",
										"text": "@notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n However, if the price is not recent this function returns the latest available price.\n The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n the returned price is recent or useful for any particular application.\n Users of this function should check the `publishTime` in the price to ensure that the returned price is\n sufficiently recent for their application. If you are considering using this function, it may be\n safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."
									},
									"functionSelector": "9474f45b",
									"id": 59,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getEmaPriceUnsafe",
									"nameLocation": "3834:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3869:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "3861:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 52,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3861:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3851:26:0"
									},
									"returnParameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "3926:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "3901:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Price_$151_memory_ptr",
													"typeString": "struct PythStructs.Price"
												},
												"typeName": {
													"id": 56,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 55,
														"name": "PythStructs.Price",
														"nameLocations": [
															"3901:11:0",
															"3913:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 151,
														"src": "3901:17:0"
													},
													"referencedDeclaration": 151,
													"src": "3901:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
														"typeString": "struct PythStructs.Price"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3900:32:0"
									},
									"scope": 118,
									"src": "3825:108:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 60,
										"nodeType": "StructuredDocumentation",
										"src": "3939:472:0",
										"text": "@notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n of the current time.\n @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n recently.\n @return price - please read the documentation of PythStructs.Price to understand how to use this safely."
									},
									"functionSelector": "711a2e28",
									"id": 70,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getEmaPriceNoOlderThan",
									"nameLocation": "4425:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "4465:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "4457:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 61,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4457:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "age",
												"nameLocation": "4482:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "4477:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 63,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "4477:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4447:44:0"
									},
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 68,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "4540:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 70,
												"src": "4515:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Price_$151_memory_ptr",
													"typeString": "struct PythStructs.Price"
												},
												"typeName": {
													"id": 67,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 66,
														"name": "PythStructs.Price",
														"nameLocations": [
															"4515:11:0",
															"4527:5:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 151,
														"src": "4515:17:0"
													},
													"referencedDeclaration": 151,
													"src": "4515:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
														"typeString": "struct PythStructs.Price"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4514:32:0"
									},
									"scope": 118,
									"src": "4416:131:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 71,
										"nodeType": "StructuredDocumentation",
										"src": "4553:535:0",
										"text": "@notice Update price feeds with given update messages.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n Prices will be updated if they are more recent than the current stored prices.\n The call will succeed even if the update is not the most recent.\n @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n @param updateData Array of price update data."
									},
									"functionSelector": "ef9e5e28",
									"id": 77,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updatePriceFeeds",
									"nameLocation": "5102:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "updateData",
												"nameLocation": "5136:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 77,
												"src": "5119:27:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 72,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "5119:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 73,
													"nodeType": "ArrayTypeName",
													"src": "5119:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5118:29:0"
									},
									"returnParameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5164:0:0"
									},
									"scope": 118,
									"src": "5093:72:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "5171:1299:0",
										"text": "@notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n Otherwise, it calls updatePriceFeeds method to update the prices.\n @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n @param updateData Array of price update data.\n @param priceIds Array of price ids.\n @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`"
									},
									"functionSelector": "b9256d28",
									"id": 90,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "updatePriceFeedsIfNecessary",
									"nameLocation": "6484:27:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "updateData",
												"nameLocation": "6538:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "6521:27:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 79,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "6521:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 80,
													"nodeType": "ArrayTypeName",
													"src": "6521:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "priceIds",
												"nameLocation": "6577:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "6558:27:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 82,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6558:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 83,
													"nodeType": "ArrayTypeName",
													"src": "6558:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "publishTimes",
												"nameLocation": "6613:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "6595:30:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint64_$dyn_calldata_ptr",
													"typeString": "uint64[]"
												},
												"typeName": {
													"baseType": {
														"id": 85,
														"name": "uint64",
														"nodeType": "ElementaryTypeName",
														"src": "6595:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"id": 86,
													"nodeType": "ArrayTypeName",
													"src": "6595:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint64_$dyn_storage_ptr",
														"typeString": "uint64[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6511:120:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6648:0:0"
									},
									"scope": 118,
									"src": "6475:174:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "6655:178:0",
										"text": "@notice Returns the required fee to update an array of price updates.\n @param updateData Array of price update data.\n @return feeAmount The required fee in Wei."
									},
									"functionSelector": "d47eed45",
									"id": 99,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getUpdateFee",
									"nameLocation": "6847:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "updateData",
												"nameLocation": "6886:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "6869:27:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 92,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "6869:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 93,
													"nodeType": "ArrayTypeName",
													"src": "6869:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6859:43:0"
									},
									"returnParameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "feeAmount",
												"nameLocation": "6931:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "6926:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "6926:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6925:16:0"
									},
									"scope": 118,
									"src": "6838:104:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 100,
										"nodeType": "StructuredDocumentation",
										"src": "6948:1154:0",
										"text": "@notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n within `minPublishTime` and `maxPublishTime`.\n You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n `getUpdateFee` with the length of the `updateData` array.\n @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n no update for any of the given `priceIds` within the given time range.\n @param updateData Array of price update data.\n @param priceIds Array of price ids.\n @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order)."
									},
									"functionSelector": "4716e9c5",
									"id": 117,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "parsePriceFeedUpdates",
									"nameLocation": "8116:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "updateData",
												"nameLocation": "8164:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "8147:27:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 101,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "8147:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 102,
													"nodeType": "ArrayTypeName",
													"src": "8147:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "priceIds",
												"nameLocation": "8203:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "8184:27:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 104,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "8184:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 105,
													"nodeType": "ArrayTypeName",
													"src": "8184:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "minPublishTime",
												"nameLocation": "8228:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "8221:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 107,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8221:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "maxPublishTime",
												"nameLocation": "8259:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "8252:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 109,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8252:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8137:142:0"
									},
									"returnParameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "priceFeeds",
												"nameLocation": "8337:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "8306:41:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PriceFeed_$160_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct PythStructs.PriceFeed[]"
												},
												"typeName": {
													"baseType": {
														"id": 113,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 112,
															"name": "PythStructs.PriceFeed",
															"nameLocations": [
																"8306:11:0",
																"8318:9:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 160,
															"src": "8306:21:0"
														},
														"referencedDeclaration": 160,
														"src": "8306:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PriceFeed_$160_storage_ptr",
															"typeString": "struct PythStructs.PriceFeed"
														}
													},
													"id": 114,
													"nodeType": "ArrayTypeName",
													"src": "8306:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PriceFeed_$160_storage_$dyn_storage_ptr",
														"typeString": "struct PythStructs.PriceFeed[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8305:43:0"
									},
									"scope": 118,
									"src": "8107:242:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 119,
							"src": "354:7997:0",
							"usedErrors": [],
							"usedEvents": [
								132,
								139
							]
						}
					],
					"src": "39:8312:0"
				},
				"id": 0
			},
			"blast_inscription/orderbook/pyth/IPythEvents.sol": {
				"ast": {
					"absolutePath": "blast_inscription/orderbook/pyth/IPythEvents.sol",
					"exportedSymbols": {
						"IPythEvents": [
							140
						]
					},
					"id": 141,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 120,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPythEvents",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 121,
								"nodeType": "StructuredDocumentation",
								"src": "64:170:1",
								"text": "@title IPythEvents contains the events that Pyth contract emits.\n @dev This interface can be used for listening to the updates for off-chain and testing purposes."
							},
							"fullyImplemented": true,
							"id": 140,
							"linearizedBaseContracts": [
								140
							],
							"name": "IPythEvents",
							"nameLocation": "244:11:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 122,
										"nodeType": "StructuredDocumentation",
										"src": "262:305:1",
										"text": "@dev Emitted when the price feed with `id` has received a fresh update.\n @param id The Pyth Price Feed ID.\n @param publishTime Publish time of the given price update.\n @param price Price of the given price update.\n @param conf Confidence interval of the given price update."
									},
									"eventSelector": "d06a6b7f4918494b3719217d1802786c1f5112a6c1d88fe2cfec00b4584f6aec",
									"id": 132,
									"name": "PriceFeedUpdate",
									"nameLocation": "578:15:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "619:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "603:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 123,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 126,
												"indexed": false,
												"mutability": "mutable",
												"name": "publishTime",
												"nameLocation": "638:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "631:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 125,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "631:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"indexed": false,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "665:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "659:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int64",
													"typeString": "int64"
												},
												"typeName": {
													"id": 127,
													"name": "int64",
													"nodeType": "ElementaryTypeName",
													"src": "659:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_int64",
														"typeString": "int64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 130,
												"indexed": false,
												"mutability": "mutable",
												"name": "conf",
												"nameLocation": "687:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "680:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 129,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "680:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "593:104:1"
									},
									"src": "572:126:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "704:228:1",
										"text": "@dev Emitted when a batch price update is processed successfully.\n @param chainId ID of the source chain that the batch price update comes from.\n @param sequenceNumber Sequence number of the batch price update."
									},
									"eventSelector": "943f0e8a16c19895fb87cbeb1a349ed86d7f31923089dd36c1a1ed5e300f267b",
									"id": 139,
									"name": "BatchPriceFeedUpdate",
									"nameLocation": "943:20:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"indexed": false,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "971:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "964:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												},
												"typeName": {
													"id": 134,
													"name": "uint16",
													"nodeType": "ElementaryTypeName",
													"src": "964:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint16",
														"typeString": "uint16"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"indexed": false,
												"mutability": "mutable",
												"name": "sequenceNumber",
												"nameLocation": "987:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 139,
												"src": "980:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 136,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "980:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:39:1"
									},
									"src": "937:66:1"
								}
							],
							"scope": 141,
							"src": "234:771:1",
							"usedErrors": [],
							"usedEvents": [
								132,
								139
							]
						}
					],
					"src": "39:966:1"
				},
				"id": 1
			},
			"blast_inscription/orderbook/pyth/PythStructs.sol": {
				"ast": {
					"absolutePath": "blast_inscription/orderbook/pyth/PythStructs.sol",
					"exportedSymbols": {
						"PythStructs": [
							161
						]
					},
					"id": 162,
					"license": "Apache-2.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 142,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "PythStructs",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 161,
							"linearizedBaseContracts": [
								161
							],
							"name": "PythStructs",
							"nameLocation": "73:11:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "PythStructs.Price",
									"id": 151,
									"members": [
										{
											"constant": false,
											"id": 144,
											"mutability": "mutable",
											"name": "price",
											"nameLocation": "623:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 151,
											"src": "617:11:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int64",
												"typeString": "int64"
											},
											"typeName": {
												"id": 143,
												"name": "int64",
												"nodeType": "ElementaryTypeName",
												"src": "617:5:2",
												"typeDescriptions": {
													"typeIdentifier": "t_int64",
													"typeString": "int64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 146,
											"mutability": "mutable",
											"name": "conf",
											"nameLocation": "693:4:2",
											"nodeType": "VariableDeclaration",
											"scope": 151,
											"src": "686:11:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 145,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "686:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 148,
											"mutability": "mutable",
											"name": "expo",
											"nameLocation": "739:4:2",
											"nodeType": "VariableDeclaration",
											"scope": 151,
											"src": "733:10:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_int32",
												"typeString": "int32"
											},
											"typeName": {
												"id": 147,
												"name": "int32",
												"nodeType": "ElementaryTypeName",
												"src": "733:5:2",
												"typeDescriptions": {
													"typeIdentifier": "t_int32",
													"typeString": "int32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 150,
											"mutability": "mutable",
											"name": "publishTime",
											"nameLocation": "824:11:2",
											"nodeType": "VariableDeclaration",
											"scope": 151,
											"src": "819:16:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 149,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "819:4:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Price",
									"nameLocation": "584:5:2",
									"nodeType": "StructDefinition",
									"scope": 161,
									"src": "577:265:2",
									"visibility": "public"
								},
								{
									"canonicalName": "PythStructs.PriceFeed",
									"id": 160,
									"members": [
										{
											"constant": false,
											"id": 153,
											"mutability": "mutable",
											"name": "id",
											"nameLocation": "989:2:2",
											"nodeType": "VariableDeclaration",
											"scope": 160,
											"src": "981:10:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 152,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "981:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 156,
											"mutability": "mutable",
											"name": "price",
											"nameLocation": "1041:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 160,
											"src": "1035:11:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
												"typeString": "struct PythStructs.Price"
											},
											"typeName": {
												"id": 155,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 154,
													"name": "Price",
													"nameLocations": [
														"1035:5:2"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 151,
													"src": "1035:5:2"
												},
												"referencedDeclaration": 151,
												"src": "1035:5:2",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
													"typeString": "struct PythStructs.Price"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 159,
											"mutability": "mutable",
											"name": "emaPrice",
											"nameLocation": "1134:8:2",
											"nodeType": "VariableDeclaration",
											"scope": 160,
											"src": "1128:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
												"typeString": "struct PythStructs.Price"
											},
											"typeName": {
												"id": 158,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 157,
													"name": "Price",
													"nameLocations": [
														"1128:5:2"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 151,
													"src": "1128:5:2"
												},
												"referencedDeclaration": 151,
												"src": "1128:5:2",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Price_$151_storage_ptr",
													"typeString": "struct PythStructs.Price"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PriceFeed",
									"nameLocation": "936:9:2",
									"nodeType": "StructDefinition",
									"scope": 161,
									"src": "929:220:2",
									"visibility": "public"
								}
							],
							"scope": 162,
							"src": "64:1087:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "39:1112:2"
				},
				"id": 2
			}
		}
	}
}